name: Upload beta backend image to GHCR and Docker Hub

on:
  push:
    branches:
      - development
    paths:
      - "backend/**"

env:
  IMAGE_NAME: "adventurelog-backend"

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ACCESS_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set build metadata
        id: vars
        env:
          OWNER: '${{ github.repository_owner }}'
        run: |
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "GIT_TAG=$(git describe --tags --abbrev=0 --exact-match 2>/dev/null || echo unknown)" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "REPO_OWNER=${OWNER,,}" >> $GITHUB_OUTPUT

      - name: Build and push Docker images
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --push \
            --build-arg GIT_SHA=${{ steps.vars.outputs.GIT_SHA }} \
            --build-arg GIT_TAG=${{ steps.vars.outputs.GIT_TAG }} \
            --build-arg BUILD_DATE=${{ steps.vars.outputs.BUILD_DATE }} \
            -t ghcr.io/$REPO_OWNER/$IMAGE_NAME:beta \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:beta \
            ./backend

      # Notify on success
      # - name: Notify Discord on success
      #   if: success()
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #       -X POST \
      #       -d "{\"username\": \"CI Bot\", \"content\": \"✅ Build and push succeeded for backend beta\"}" \
      #       ${{ secrets.DISCORD_WEBHOOK_BUILD }}

      # # Notify on failure
      # - name: Notify Discord on failure
      #   if: failure()
      #   run: |
      #     curl -H "Content-Type: application/json" \
      #       -X POST \
      #       -d "{\"username\": \"CI Bot\", \"content\": \"❌ Build or push failed for backend beta\"}" \
      #       ${{ secrets.DISCORD_WEBHOOK_BUILD }}
